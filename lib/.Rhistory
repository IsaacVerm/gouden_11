percentage_violation = is.character(unlist(map(selections, function(selection) class(selection))))
print(percentage_violation)
selections <- replicate(10, pick("4-4-2", player_score_by_season))
percentage_violation = unlist(map(selections, function(selection) class(selection)))
print(percentage_violation)
# run n times
selections <- replicate(10, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
# percentage_violation = unlist(map(selections, function(selection) class(selection)))
# print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
selections <- replicate(10, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
percentage_violation = unlist(map(selections, function(selection) 'violated constraints' %in% selection))
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
selections <- replicate(10, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
percentage_violation = map(selections, function(selection) 'violated constraints' %in% selection)
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
selections <- replicate(10, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
percentage_violation = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
selections <- replicate(10, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
percentage_violation = sum(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
percentage_violation = sum(violates)/n
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
percentage_violation = 1 - sum(violates)/n
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
View(selections)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
percentage_violation = 1 - sum(violates)/n
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
percentage_violation = 1 - sum(violates)/n
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
percentage_violation = 1 - sum(violates)/n
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
percentage_violation = sum(violates)/n
print(percentage_violation)
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = which(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
percentage_violation = (sum(violates)/n)*100
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = which(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
percentage_violation = (sum(violates)/n)*100
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = which(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
percentage_violation = (sum(length(violates))/n)*100
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = which(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
percentage_violation = (sum(length(violates))/n)*100
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = which(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
percentage_violation = (sum(length(violates))/n)*100
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
ind_violating_selections = which(map_lgl(selections, function(selection) 'violated constraints' %in% selection))
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# distribution of total scores by selection
# total_score_by_selection = selections %>%
#   map(summarise())
# ggplot(data = )
View(selections)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# distribution of total scores by selection
total_score_by_selection = selections %>%
.[]
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# distribution of total scores by selection
total_score_by_selection = selections %>%
.[ind_correct_selections]
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# distribution of total scores by selection
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
# ggplot(data = )
cummax(c(3:1, 2:0, 4:2))
?cummax
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# distribution of total scores by selection
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score) %>%
cummax
# ggplot(data = )
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# distribution of total scores by selection
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
# ggplot(data = )
as.data.frame(cumulative_maximum_score)
as.data.frame(cumulative_maximum_score, total_score_by_selection)
as.data.frame(list(cumulative_maximum_score, total_score_by_selection))
as.data.frame(cumulative_maximum_score, total_score_by_selection)
data.frame(max_score_over_all_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection)
data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection)
data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
?unite
knitr::opts_chunk$set(echo = TRUE)
# packages
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
# load data
setwd("/home/isaac/SpiderOak Hive/gouden_11/data/code/transform")
source('player_score_by_season.R')
# only select current season
player_score_by_season <- player_score_by_season %>%
filter(season == "2016-2017")
knitr::opts_chunk$set(echo = TRUE)
# packages
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
# load data
setwd("/home/isaac/SpiderOak Hive/gouden_11/data/code/transform")
source('player_score_by_season.R')
# only select current season
player_score_by_season <- player_score_by_season %>%
filter(season == "2016-2017")
ggplot(data = player_score_by_season,
aes(x = contribution)) + geom_histogram()
n_zero_contribution_players = sum(player_score_by_season$contribution <= 0)
# formation e.g. 4-4-2
# cost limit in millions
# if remove_low_value_players = TRUE players who probably won't add much (depending on contribution_threshold) are filtered out beforehand
pick <- function(formation,
dataset,
cost_limit = 250,
max_n_players_same_team = 2,
remove_low_contribution_players = TRUE,
contribution_threshold = 0) {
# parse formation
positions <- c("Doelman","Verdediger","Middenvelder","Aanvaller")
n_to_select <- c(1, as.integer(unlist(strsplit(formation, "-"))))
# remove low value players
dataset <- filter(dataset, contribution > contribution_threshold)
# select number of players by position
select_n_by_position <- function(name_position, n, dataset) {
dataset %>%
filter(position == name_position) %>%
sample_n(n)
}
selection <- map2(.x = positions,
.y = n_to_select,
.f = select_n_by_position,
data = dataset) %>%
reduce(bind_rows)
# check if selection is legal
doesnt_exceed_cost_limit <- sum(selection$opening_price) < cost_limit
max_two_players_same_team <- selection %>%
group_by(team) %>%
summarise(n = n()) %>%
pull(n)
max_two_players_same_team <- all(max_two_players_same_team <= max_n_players_same_team)
if (doesnt_exceed_cost_limit & max_two_players_same_team) {
return(selection)
} else {
return("violated constraints")
}
return(selection)
}
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
View(score_stabilisation)
?unite
unite(score_stabilisation, "score", select(one_of(c("score_selection","max_score_preceding_selections"))))
unite(score_stabilisation, "score", one_of(c("score_selection","max_score_preceding_selections")))
?spread
?gather
gather(score_stabilisation, "score", one_of(c("score_selection","max_score_preceding_selections")))
gather(score_stabilisation, "score", c("score_selection","max_score_preceding_selections")))
gather(score_stabilisation, "score", c("score_selection","max_score_preceding_selections"))
gather(score_stabilisation, "score")
gather(score_stabilisation, "score", -one_of("ind"))
gather(score_stabilisation, "score", -one_of(c("ind")))
gather(score_stabilisation, "score", -ind)
gather_(score_stabilisation, "score", -ind)
gather(score_stabilisation, "score", -ind)
?gather
gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
score_stabilisation <- gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
ggplot(data = score_stabilisation,
aes(x = ind, y = score, colour = type_of_score)) +
geom_line
# run n times
n = 10
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
score_stabilisation <- gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
ggplot(data = score_stabilisation,
aes(x = ind, y = score, colour = type_of_score)) +
geom_line()
# run n times
n = 50
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
score_stabilisation <- gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
ggplot(data = score_stabilisation,
aes(x = ind, y = score, colour = type_of_score)) +
geom_line()
# run n times
n = 1000
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
score_stabilisation <- gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
ggplot(data = score_stabilisation,
aes(x = ind, y = score, colour = type_of_score)) +
geom_line()
# run n times
n = 100
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
score_stabilisation <- gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
ggplot(data = score_stabilisation,
aes(x = ind, y = score, colour = type_of_score)) +
geom_line()
# run n times
n = 100
selections <- replicate(n, pick("4-4-2", player_score_by_season))
# filter out selections violating constraints
violates = map_lgl(selections, function(selection) 'violated constraints' %in% selection)
ind_violating_selections = which(violates)
ind_correct_selections = which(!violates)
percentage_violation = (sum(length(ind_violating_selections))/n)*100
# after how many team picks does the maximum score stabilises?
total_score = function(selection) {
sum(selection$total)
}
total_score_by_selection = selections %>%
.[ind_correct_selections] %>%
map_int(total_score)
cumulative_maximum_score = cummax(total_score_by_selection)
score_stabilisation <- data.frame(max_score_preceding_selections = cumulative_maximum_score,
score_selection = total_score_by_selection,
ind = 1:length(cumulative_maximum_score))
score_stabilisation <- gather(data = score_stabilisation, key = "type_of_score", value = "score", -ind)
ggplot(data = score_stabilisation,
aes(x = ind, y = score, colour = type_of_score)) +
geom_line()
